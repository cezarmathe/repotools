#!/bin/bash

# Load the configuration file

if [ ! -f .config ]; then
  echo "Config file not found."
  exit 1
fi

source .config

# ----------



# Help&usage

function print_help() {
  echo
}

function print_usage() {
  echo
}

# ----------



# Commands

function new_repository() {
  local NAME="$1"; shift

  cd "${GLOBAL_REPO_DIR}"

  if [[ -d "${NAME}" ]]; then
    echo "The repository already exists."
  else
    git clone https://github.com/cezarmathe/example_repository.git "${NAME}"

    # TODO: change config file to match the repo name and other config variables
  fi
  
}

function initialize_build_environment() {
  local DIR="$1"; shift

  if [[ -z "${DIR}" ]]; then
    mkdir -p "${GLOBAL_BUILD_DIR}"
    mkarchroot -C /etc/pacman.conf "${GLOBAL_BUILD_DIR}/root" base-devel
  else
    if [[ "${DIR:0:1}" = "/" ]]; then
      mkdir -p "${DIR}"
      mkarchroot -C /etc/pacman.conf "${DIR}/root" base-devel
    else
      mkdir -p "${REPOTOOLS_PATH}/${DIR}"
      mkarchroot -C /etc/pacman.conf "${REPOTOOLS_PATH}/${DIR}}/root" base-devel
    fi
  fi
}

# ----------



# Main cli

function main() {
  # local REPOSITORY="$1"; shift

  # if [[ -z "$SUBCOMMAND" ]]; then
  #   echo "No subcommand specified. Run \"./repotools help\" if you need help."
  #   exit 1
  # fi

  while getopts 'n:a:r:sSbB:ucm:iI:' flag; do
    case "${flag}" in
      n)
        # new repository
        new_repository "${OPTARG}"
        ;;
      a)
        # add a new package in the repository
        ;;
      r)
        # remove the package from the repository
        ;;
      s)
        # sync all the repositories with the remote
        ;;
      S)
        # sync a repository with the remote
        ;;
      u)
        # update the packages in the repository
        ;;
      c)
        # do a cycle
        ;;
      b)
        # build all packages in a repository
        ;;
      B)
        # build a package in a repository
        ;;
      m)
        # create a new meta package in the repository
        ;;
      i)
        # initialize the build environment
        initialize_build_environment 
        ;;
      I)
        # initialize the build environment in a specific directory
        initialize_build_environment "${OPTARG}"
        ;;
      *)
        print_usage
        exit 1 ;;
    esac
  done

  # case "$SUBCOMMAND" in

  #   "help")
  #     print_help $@
  #     exit
  #     ;;

  #   "clone-repo"

  # esac
}

main $@